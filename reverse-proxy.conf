
# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
#worker_rlimit_nofile 400000;

# only log critical errors
error_log /var/log/nginx/error.log crit;

env TZ="Europe/Berlin";

load_module modules/ngx_http_headers_more_filter_module.so;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 32000;

    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}


http {

 # cache informations about FDs, frequently accessed files
 # can boost performance, but you need to test those values
 #open_file_cache max=200000 inactive=20s;
 #open_file_cache_valid 30s;
 #open_file_cache_min_uses 2;
 #open_file_cache_errors on;

 #CIS - Nginx - 5.2.5 Ensure rate limits by IP address are set.
 #Creates a memory zone of 10 megabytes called "ratelimit".
 limit_req_zone $binary_remote_addr zone=ratelimit:10m rate=150r/s;

 #CIS - Nginx - 5.2.2 Ensure the maximum request body size is set correctly.
 client_max_body_size 200M;

 #CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
 limit_conn_zone $binary_remote_addr zone=limitperip:10m;

 #CIS - Nginx - 5.2.3 Ensure the maximum buffer size for URIs is defined.
 large_client_header_buffers 4 4M;

 proxy_connect_timeout       300;
 proxy_send_timeout      300;
 proxy_read_timeout      300;
 proxy_buffer_size       512k;
 proxy_buffers           32 4m;
 proxy_busy_buffers_size     100m;
 proxy_temp_file_write_size  50m;

 # send headers in one piece, it is better than sending them one by one
 tcp_nopush on;

 # don't buffer data sent, good for small data bursts in real time
 tcp_nodelay on;

 # allow the server to close connection on non responding client, this will free up memory
 reset_timedout_connection on;

 # request timed out -- default 60
 #CIS - Nginx - 5.2.1 Ensure timeout values for reading the client header and body are set correctly (10s).
 client_body_timeout 10;

 # if client stop responding, free up memory -- default 60
 send_timeout 10;

 # server will close connection after this time -- default 75
 keepalive_timeout 20;

 # number of requests client can make over keep-alive
 #keepalive_requests 100000;#-- for testing environment
 #keepalive_requests 1024;

 #CIS - Nginx - 5.2.1 Ensure timeout values for reading the client header and body are set correctly (10s).
 client_header_timeout 10;
 include    /etc/nginx/mime.types;
 #more_clear_headers Server;
 more_set_headers 'Server: YourServerName';
 charset UTF-8;

 add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
 #CIS - Nginx - 5.3.1 Ensure X-Frame-Options header is configured and enabled.
 #add_header X-Frame-Options SAMEORIGIN;

 #CIS - Nginx - 5.3.2 Ensure X-Content-Type-Options header is configured and enabled.
 #add_header X-Content-Type-Options nosniff;


 #CIS - Nginx - 5.3.3 Ensure the X-XSS-Protection Header is enabled and configured properly
 #add_header X-XSS-Protection "1; mode=block";
 add_header X-Whome "YourHeader";

 ssl_session_cache shared:SSL:20m;
 ssl_session_timeout 60m;

 gzip on;
 gzip_vary on;
 gzip_min_length 10240;
 gzip_comp_level 2;
 gzip_buffers 4 8k;
 gzip_proxied expired no-cache no-store private auth;
 gzip_types
		text/plain
        text/css
        text/javascript
        text/xml
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;
 gzip_disable "MSIE [1-6]\.";

 map $http_upgrade $connection_upgrade {
    default upgrade;
    ' '  close;
 }

 # Redirects https://44.215.119.15 to https://www.goodreads.com
 server {
	listen 443;
	listen [::]:443;
	server_tokens off;
	access_log  off;
    error_log   off;
    server_name 44.215.119.15;
	error_page 497 https://$server_name$request_uri;
	#CIS - Nginx - 4.1.13 Ensure session resumption is disabled to enable perfect forward security.

	#CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
	limit_conn limitperip 100;

	#ssl_session_tickets off;
	return 301 $scheme://www.goodreads.com$request_uri;
 }

 #CIS - Nginx  - 4.1.1 Ensure HTTP is redirected to HTTPS.
 # Redirect all HTTP requests to HTTPS
 server {
  listen 80;
  listen [::]:80;
  server_tokens off;
  server_name goodreads.com;
  access_log  off;
  error_log   off;
  #CIS - Nginx - 4.1.13 Ensure session resumption is disabled to enable perfect forward security.
  #ssl_session_tickets off;

  #CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
  limit_conn limitperip 100;

  error_page 497 https://$server_name$request_uri;
  return 301 https://$server_name$request_uri;
 }

 upstream goodreadApp {
  #app
  server 192.168.100.9:443;

  #one-another-app over https
  server 192.168.100.8:4443 backup;
 }

 server {
  listen 443 default ssl http2;
  listen [::]:443 default ssl http2;
  server_tokens off;
  server_name goodreads.com;

  ssl_certificate 	/etc/nginx/certs/chained.crt;
  ssl_certificate_key /etc/nginx/certs/private.key;
  ssl_protocols       TLSv1.2 TLSv1.3;

  #CIS - Nginx - 4.1.13 Ensure session resumption is disabled to enable perfect forward security.
  #ssl_session_tickets off;

  #CIS - Nginx  - 4.1.5 Disable weak ciphers.
  ssl_prefer_server_ciphers on;
  ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;

  #CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
  limit_conn limitperip 64;

  ssl_buffer_size 8k;

  root /var/www/;

  location / {
   proxy_pass https://goodreadApp;
   proxy_http_version 1.1;
   proxy_set_header Upgrade $http_upgrade;
   proxy_set_header Connection $connection_upgrade;
   proxy_set_header Host $http_host;
   proxy_buffering off;
   proxy_ignore_client_abort off;
   #CIS - Nginx  - 3.7 Ensure proxies pass source IP information.
   proxy_set_header X-Real-IP $remote_addr;
   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
   #add_header X-Upstream $upstream_addr always;
   #CIS - Nginx  - 2.5.4 Ensure the NGINX reverse proxy does not enable information disclosure.
   proxy_hide_header X-Powered-By;
   proxy_hide_header Server;

   #CIS - Nginx - 5.2.5 Ensure rate limits by IP address are set.
   limit_req zone=ratelimit burst=30 nodelay;
  }

  access_log  off;
  log_not_found off;

  error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /;
  error_page 497 https://$server_name$request_uri;
 }
}