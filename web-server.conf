worker_processes auto;


pid /var/run/nginx.pid;

#daemon off;
env TZ="Europe/Berlin";
load_module modules/ngx_http_headers_more_filter_module.so;


# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 32000;

    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {

  #CIS - Nginx - 5.2.5 Ensure rate limits by IP address are set.
  #Creates a memory zone of 10 megabytes called "ratelimit".
  limit_req_zone $binary_remote_addr zone=ratelimit:10m rate=150r/s;

  #CIS - Nginx  - 3.1 Ensure detailed logging is enabled
  log_format compression 'server="$server_name" host="$host‚Äù dest_port="$server_port"'
							'src="$remote_addr" ip="$realip_remote_addr" user="$remote_user"'
							'time_local="$time_local" http_status="$status"'
							'http_referer="$http_referer" http_user_agent="$http_user_agent"'
							'http_x_forwarded_for="$http_x_forwarded_for"'
							'http_x_header="$http_x_header" uri_query="$query_string" uri_path="$uri"'
							'request=$request http_method="$request_method"';

  #CIS - Nginx - 5.2.2 Ensure the maximum request body size is set correctly.
  client_max_body_size 100M;

  #CIS - Nginx - 5.2.3 Ensure the maximum buffer size for URIs is defined.
  large_client_header_buffers 4 4M;

  #CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
  limit_conn_zone $binary_remote_addr zone=limitperip:10m;

  # send headers in one piece, it is better than sending them one by one
  tcp_nopush on;

  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay on;

  # allow the server to close connection on non responding client, this will free up memory
  reset_timedout_connection on;

  # request timed out -- default 60
  #CIS - Nginx - 5.2.1 Ensure timeout values for reading the client header and body are set correctly (10s).
  client_body_timeout 10;

  #CIS - Nginx - 5.2.1 Ensure timeout values for reading the client header and body are set correctly (10s).
  client_header_timeout 10;

  #CIS - Nginx  - 2.4.4 Ensure send_timeout is set to 10 seconds or less, but not 0.
  # if client stop responding, free up memory -- default 60
  send_timeout 10;

  #CIS - Nginx  - Ensure keepalive_timeout is 10 seconds or less, but not 0
  # server will close connection after this time -- default 75
  keepalive_timeout 10;

  include    /etc/nginx/mime.types;
  #more_clear_headers Server;
  #CIS - Nginx  - 2.5.1 Ensure server_tokens directive is set to 'off'
  more_set_headers 'Server: GoodreadsServer';
  charset UTF-8;

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  #CIS - Nginx - 5.3.1 Ensure X-Frame-Options header is configured and enabled.
  add_header X-Frame-Options SAMEORIGIN;

  #CIS - Nginx - 5.3.2 Ensure X-Content-Type-Options header is configured and enabled.
  add_header X-Content-Type-Options nosniff;

  #CIS - Nginx - 5.3.3 Ensure the X-XSS-Protection Header is enabled and configured properly
  add_header X-XSS-Protection "1; mode=block";

  #CIS - Nginx - 5.3.4 Ensure that Content Security Policy (CSP) is enabled and configured properly.
  add_header Content-Security-Policy "default-src https: data: 'unsafe-inline' 'unsafe-eval'" always;

  #CIS - Nginx - 5.3.5 Ensure the Referrer Policy is enabled and configured properly.
  add_header Referrer-Policy "no-referrer";

  add_header X-Whome "goodreads";

  ssl_session_cache shared:SSL:20m;
  ssl_session_timeout 60m;

  gzip on;
  gzip_vary on;
  gzip_min_length 10240;
  gzip_comp_level 2;
  gzip_buffers 4 8k;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types
		text/plain
        text/css
        text/javascript
        text/xml
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;
  gzip_disable "MSIE [1-6]\.";

  #Redirecting port 80 to port 443
  server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name subdomain.goodreads.com;
	#CIS - Nginx  - 3.1 Ensure detailed logging is enabled
	access_log on;
	access_log /var/log/nginx/nginx-access.log compression;
    error_log   on;

	#CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
	limit_conn limitperip 100;

	#CIS - Nginx - 5.1.2 Ensure only whitelisted HTTP methods are allowed.
	if ($request_method !~ ^(GET|HEAD|POST)$) {
			return 444;
	}

	#CIS - Nginx - 4.1.13 Ensure session resumption is disabled to enable perfect forward security.
	ssl_session_tickets off;

	#CIS - Nginx - 4.1.6 Ensure custom Diffie-Hellman parameters are used.
	ssl_dhparam /etc/nginx/ssl/dhparam.pem;
	return 301 https://$host$request_uri;
  }

  #Redirecting www to non-www for port 80
  server {
	listen 80;
	listen [::]:80;
	server_name www.subdomain.goodreads.com;
	#CIS - Nginx  - 3.1 Ensure detailed logging is enabled
	access_log  on;
	access_log /var/log/nginx/nginx-access.log compression;
    error_log   on;

	#CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
	limit_conn limitperip 100;

	#CIS - Nginx - 5.1.2 Ensure only whitelisted HTTP methods are allowed.
	if ($request_method !~ ^(GET|HEAD|POST)$) {
			return 444;
	}

	#CIS - Nginx - 4.1.13 Ensure session resumption is disabled to enable perfect forward security.
	ssl_session_tickets off;
	return 301 https://subdomain.goodreads.com$request_uri;
  }

  #Redirecting www to non-www for port 443
  server {
	listen 443;
	listen [::]:443;
	#CIS - Nginx  - 3.1 Ensure detailed logging is enabled
	access_log on;
	access_log /var/log/nginx/nginx-access.log compression;
	error_log   on;
	server_name www.subdomain.goodreads.com;
	#CIS - Nginx  - 2.5.1 Ensure server_tokens directive is set to 'off'
	server_tokens off;

	ssl_certificate 	/etc/nginx/certs/subdomain.goodreads.com.chained.crt;
    ssl_certificate_key /etc/nginx/certs/subdomain.goodreads.com.key;
	ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
	#CIS - Nginx  - 4.1.5 Disable weak ciphers.
	ssl_prefer_server_ciphers on;
	ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

	#CIS - Nginx - 4.1.13 Ensure session resumption is disabled to enable perfect forward security.
	ssl_session_tickets off;

	#CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
	limit_conn limitperip 100;

	#CIS - Nginx  - 4.1.6 Ensure custom Diffie-Hellman parameters are used.
	ssl_dhparam /etc/nginx/ssl/dhparam.pem;

	return 301 https://subdomain.goodreads.com$request_uri;
  }

  # Redirect all HTTP requests to HTTPS
  server {
	listen 80;
	listen [::]:80;
	#CIS - Nginx  - 3.1 Ensure detailed logging is enabled
	access_log  on;
	access_log /var/log/nginx/nginx-access.log compression;
    error_log   on;

	#CIS - Nginx - 4.1.13 Ensure session resumption is disabled to enable perfect forward security.
	ssl_session_tickets off;

	#CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
	limit_conn limitperip 100;

	#CIS - Nginx - 5.1.2 Ensure only whitelisted HTTP methods are allowed.
	if ($request_method !~ ^(GET|HEAD|POST)$) {
		return 444;
	}

	error_page 497 https://subdomain.goodreads.com$request_uri;
	return 301 https://subdomain.goodreads.com$request_uri;
  }

  server {
	listen 443 default ssl http2;
	listen [::]:443 default ssl http2;
	#CIS - Nginx  - 2.4.2 Ensure requests for unknown host names are rejected
    server_name subdomain.goodreads.com;
	#CIS - Nginx  - 2.5.1 Ensure server_tokens directive is set to 'off'
	server_tokens off;

	#CIS - Nginx  - Ensure keepalive_timeout is 10 seconds or less, but not 0.
	keepalive_timeout   10;

	#ssl off;
	ssl_certificate 	/etc/nginx/certs/subdomain.goodreads.com.chained.crt;
    ssl_certificate_key /etc/nginx/certs/subdomain.goodreads.com.key;
	ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;

	ssl_prefer_server_ciphers on;
    #ssl_ciphers         HIGH:!aNULL:!MD5;
	ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

	ssl_buffer_size 8k;

	#CIS - Nginx  - 2.5.2 Ensure default error and index.html pages do not reference NGINX.
	index index.html;
	root /var/www/;

	#CIS - Nginx - 4.1.13 Ensure session resumption is disabled to enable perfect forward security.
	ssl_session_tickets off;

	#CIS - Nginx  - 4.1.6 Ensure custom Diffie-Hellman parameters are used.
	ssl_dhparam /etc/nginx/ssl/dhparam.pem;

	#CIS - Nginx  - 3.1 Ensure detailed logging is enabled
	access_log on;
	access_log /var/log/nginx/nginx-access.log compression;
	#CIS - Nginx  - 3.3 Ensure error logging is enabled and set to the info logging level.
	error_log  	/var/log/nginx/nginx.error_log  info; #[ debug | info | notice | warn | error | crit ]

	#CIS - Nginx - 5.2.4 Ensure the number of connections per IP address is limited.
	limit_conn limitperip 100;

	#CIS - Nginx - 5.1.2 Ensure only whitelisted HTTP methods are allowed.
	if ($request_method !~ ^(GET|HEAD|POST)$) {
		return 444;
	}

	log_not_found off;
    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
      expires 30d;
    }

    location / {
	    #CIS - Nginx - 5.2.5 Ensure rate limits by IP address are set.
		limit_req zone=ratelimit burst=30 nodelay;
    }


	#CIS - Nginx - 2.5.3 Ensure hidden file serving is disabled.
	# !-- Impact: This may break well-known hidden files that are needed for functionality.
	location ~ /\. {
		deny all;
		return 404;
	}

	#CIS - Nginx  - 2.5.2 Ensure default error and index.html pages do not reference NGINX.
    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /;
	error_page 497 https://$server_name$request_uri;
  }
}